import{createRequire as t}from"node:module";var e={5721:t=>{function e(t,e){if((t=t.replace(/\s+/g,""))===(e=e.replace(/\s+/g,"")))return 1;if(t.length<2||e.length<2)return 0;let r=new Map;for(let e=0;e<t.length-1;e++){const n=t.substring(e,e+2),s=r.has(n)?r.get(n)+1:1;r.set(n,s)}let n=0;for(let t=0;t<e.length-1;t++){const s=e.substring(t,t+2),o=r.has(s)?r.get(s):0;o>0&&(r.set(s,o-1),n++)}return 2*n/(t.length+e.length-2)}t.exports={compareTwoStrings:e,findBestMatch:function(t,r){if(!function(t,e){return"string"==typeof t&&!!Array.isArray(e)&&!!e.length&&!e.find((function(t){return"string"!=typeof t}))}(t,r))throw new Error("Bad arguments: First argument should be a string, second should be an array of strings");const n=[];let s=0;for(let o=0;o<r.length;o++){const a=r[o],i=e(t,a);n.push({target:a,rating:i}),i>n[s].rating&&(s=o)}return{ratings:n,bestMatch:n[s],bestMatchIndex:s}}}}},r={};const n=t(import.meta.url)("worker_threads"),s=t(import.meta.url)("fs");var o=function t(n){var s=r[n];if(void 0!==s)return s.exports;var o=r[n]={exports:{}};return e[n](o,o.exports,t),o.exports}(5721);async function a(t){return new Promise(((e,r)=>{let n="";const o=s.createReadStream(t,"utf-8");o.on("data",(t=>{n+=t})),o.on("error",(t=>{r(t)})),o.on("end",(()=>{e(n)}))}))}let i=[],l="";(async function(){const t=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];for(let e=0;e<t.length;e++)l+=await a(`./src/Dictionary/${t[e]}.wl`);i=l.split("\n").filter((t=>""!==t.trim()))})().then((()=>{n.parentPort.on("message",(t=>{const e=t.split(" ");let r="";e.forEach((t=>{if(isNaN(t)){let e=0,n=-1;for(let r=0;r<i.length;r++){const s=(0,o.compareTwoStrings)(t,i[r]);s>e&&(e=s,n=r)}if(-1!==n){const e=new Set(i[n]),s=new Set(t);c(e,s)>.8?r+=i[n]+" ":r+=t+" "}else r+=t+" "}else r+=t+" "})),n.parentPort.postMessage(r.trim())}))}));const c=(t,e)=>{const r=[...t].filter((t=>e.has(t))),n=new Set([...t,...e]);return r.length/n.size};